on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: hass-cli-auth-authentik

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Set up cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test --all-features

  release-build:
    name: Build Release
    needs: check
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            platform: linux-gnu
            arch: x86_64
          - target: x86_64-unknown-linux-musl
            platform: linux-musl
            arch: x86_64
          - target: aarch64-unknown-linux-gnu
            platform: linux-gnu
            arch: arm64
          - target: aarch64-unknown-linux-musl
            platform: linux-musl
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rust-src

      - name: Install cross
        run: |
          cargo install --force cross
          cross --version
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

#      - name: Install aarch64 GNU cross-compilation dependencies
#        if: matrix.target == 'aarch64-unknown-linux-gnu'
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y gcc-aarch64-linux-gnu
#
#      - name: Install aarch64 MUSL cross-compilation dependencies
#        if: matrix.target == 'aarch64-unknown-linux-musl'
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools
#          sudo ln -s /usr/bin/aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-musl-gcc
#
#      - name: Install x86_64 MUSL tools
#        if: matrix.target == 'x86_64-unknown-linux-musl'
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y musl-tools

      - name: Install UPX
        run: |
          sudo apt-get update
          sudo apt-get install -y upx

      - name: Build binary
        run: |
          CARGO_BIN_PATH=$(realpath ~/.cargo/bin)
          CROSS_CONTAINER_OPTS="-v ${CARGO_BIN_PATH}:/usr/local/cargo/bin:z" cross build --release --target ${{ matrix.target }} -vv
          cross build --release --target ${{ matrix.target }} -vv
          upx --best --lzma target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} ${{ env.BINARY_NAME }}-${{ github.ref_name }}-${{ matrix.arch }}-${{ matrix.platform }}
          sha256sum ${{ env.BINARY_NAME }}-${{ github.ref_name }}-${{ matrix.arch }}-${{ matrix.platform }} > ${{ env.BINARY_NAME }}-${{ github.ref_name }}-${{ matrix.arch }}-${{ matrix.platform }}.sha256

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{ env.BINARY_NAME }}-${{ github.ref_name }}-${{ matrix.arch }}-${{ matrix.platform }}*
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: true
