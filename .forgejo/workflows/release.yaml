on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: hass-cli-auth-authentik

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Set up cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test --all-features

  build-glibc:
    name: Build Release (glibc)
    needs: check
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Build binary for glibc
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Install UPX
        run: sudo apt-get update && sudo apt-get install -y upx

      - name: Compress binary
        run: |
          upx --best --lzma target/x86_64-unknown-linux-gnu/release/${{ env.BINARY_NAME }}
          cp target/x86_64-unknown-linux-gnu/release/${{ env.BINARY_NAME }} ${{ env.BINARY_NAME }}-${{ github.ref_name }}-x86_64-linux-gnu
          sha256sum ${{ env.BINARY_NAME }}-${{ github.ref_name }}-x86_64-linux-gnu > ${{ env.BINARY_NAME }}-${{ github.ref_name }}-x86_64-linux-gnu.sha256

      - name: Upload Release (glibc)
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-x86_64-linux-gnu*
          name: Release ${{ github.ref_name }} (glibc)
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: true

  build-musl:
    name: Build Release (musl)
    needs: check
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
      options: --user root
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies in Alpine
        run: |
          apk update
          apk add --no-cache musl musl-dev musl-utils rust cargo upx bash

      - name: Setup Rust target for musl
        run: rustup target add x86_64-unknown-linux-musl

      - name: Build binary for musl
        run: cargo build --release --target x86_64-unknown-linux-musl

      - name: Compress binary
        run: |
          upx --best --lzma target/x86_64-unknown-linux-musl/release/${{ env.BINARY_NAME }}
          cp target/x86_64-unknown-linux-musl/release/${{ env.BINARY_NAME }} ${{ env.BINARY_NAME }}-${{ github.ref_name }}-x86_64-linux-musl
          sha256sum ${{ env.BINARY_NAME }}-${{ github.ref_name }}-x86_64-linux-musl > ${{ env.BINARY_NAME }}-${{ github.ref_name }}-x86_64-linux-musl.sha256

      - name: Upload Release (musl)
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.BINARY_NAME }}-${{ github.ref_name }}-x86_64-linux-musl*
          name: Release ${{ github.ref_name }} (musl)
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: true